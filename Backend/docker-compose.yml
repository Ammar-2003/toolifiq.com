version: '3.8'

services:
  web:
    build: .
    container_name: django_app
    command: >
      sh -c "
      python manage.py wait_for_services &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Use the correct service name 'redis'
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Use the correct service name 'minio'
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=uploads
    depends_on:
      - db
      - redis
      - minio
    networks:
      - app_network

  db:
    image: postgres:17
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: db_postgresql
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ToXic1234
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis_broker
    ports:
      - "6379:6379"
    networks:
      - app_network

  minio:
    image: minio/minio
    container_name: minio_storage
    hostname: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - app_network

  celery:
    build: .
    container_name: celery_worker
    command: celery -A core worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      - redis
      - minio
      - web
    networks:
      - app_network

volumes:
  postgres_data:
  minio_data:

networks:
  app_network:
    driver: bridge